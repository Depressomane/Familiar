[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# fam_x_chips
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if effects.jokers.Xmult_mod then mult = mod_mult(mult*effects.jokers.Xmult_mod);extras.mult = true  end"
position = "after"
payload = '''
if effects.jokers.fam_Xchip_mod then hand_chips = mod_chips(hand_chips*effects.jokers.fam_Xchip_mod);extras.hand_chips = true end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if effect.Xmult_mod then mult = mod_mult(mult*effect.Xmult_mod);extras.mult = true  end"
position = "after"
payload = '''
if effect.fam_Xchip_mod then hand_chips = mod_chips(hand_chips*effect.fam_Xchip_mod);extras.hand_chips = true end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "x_mult = center.config.Xmult or 1,"
position = "after"
payload = '''
fam_x_chips = center.config.Xchips or 0,
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "local p_dollars = card:get_p_dollars()"
position = "before"
payload = '''
local fam_x_chips = card:get_chip_x_bonus()
if fam_x_chips > 0 then
	ret.fam_x_chips = fam_x_chips
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "elseif eval_type == 'dollars' then"
position = "before"
payload = '''
elseif eval_type == 'fam_x_chips' then 
	sound = 'Xmult_mod'
	amt = amt
	text = 'X' .. amt
	colour = G.C.CHIPS
	config.type = 'fade'
	config.scale = 0.7
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if effects[ii].message then"
position = "before"
payload = '''
if effects[ii].fam_x_chips then
	mod_percent = true
	hand_chips = mod_chips(hand_chips*effects[ii].fam_x_chips)
	update_hand_text({delay = 0}, {chips = hand_chips})
	card_eval_status_text(G.hand.cards[i], 'fam_x_chips', effects[ii].fam_x_chips, percent)
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "--calculate the card edition effects"
position = "before"
payload = '''
if effects[ii].fam_x_chips then
	mod_percent = true
	if effects[ii].card then juice_card(effects[ii].card) end
	hand_chips = mod_chips(hand_chips*effects[ii].fam_x_chips)
	update_hand_text({delay = 0}, {chips = hand_chips})
	card_eval_status_text(scoring_hand[i], 'fam_x_chips', effects[ii].fam_x_chips, percent)
end
if effects[ii].ranchips then
	mod_percent = true
	ranchips = math.random(effects[ii].cmin,effects[ii].cmax)
	if effects[ii].card then juice_card(effects[ii].card) end
	hand_chips = mod_chips(hand_chips + ranchips)
	update_hand_text({delay = 0}, {chips = hand_chips})
	card_eval_status_text(scoring_hand[i], 'ranchips', effects[ii].ranchips, percent)
end
if effects[ii].ranmult then
	mod_percent = true
	ranmult = math.random(effects[ii].mmin,effects[ii].mmax)
	if effects[ii].card then juice_card(effects[ii].card) end
	mult = mod_mult(mult + ranmult)
	update_hand_text({delay = 0}, {mult = mult})
	card_eval_status_text(scoring_hand[i], 'ranmult', effects[ii].ranmult, percent)
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = 'if effects[ii].edition then'
position = 'after'
match_indent = true
payload = '''
if scoring_hand and scoring_hand[i] and scoring_hand[i].edition then
	local trg = scoring_hand[i]
	local edi = trg.edition
	if edi.fam_x_chips then
		hand_chips = mod_chips(hand_chips * edi.fam_x_chips)
		update_hand_text({delay = 0}, {chips = hand_chips})
		card_eval_status_text(trg, 'extra', nil, percent, nil,
		{message = 'X'.. edi.fam_x_chips ..' Chips',
		edition = true,
		fam_x_chips = true})
	end
	if edi.ranchips then
		edi.ranchips = math.random(edi.cmin,edi.cmax)
		hand_chips = mod_chips(hand_chips + edi.ranchips )
		update_hand_text({delay = 0}, {chips = hand_chips})
		card_eval_status_text(trg, 'extra', nil, percent, nil,
		{message = '+'.. edi.ranchips ..' Chips',
		edition = true,
		ranchips = true})
	end
	if edi.ranmult then
		edi.ranmult = math.random(edi.mmin,edi.mmax)
		mult = mod_mult(mult + edi.ranmult )
		update_hand_text({delay = 0}, {mult = mult})
		card_eval_status_text(trg, 'extra', nil, percent, nil,
		{message = '+'.. edi.ranmult ..' Mult',
		edition = true,
		ranmult = true})
	end
end
'''

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = 'if edition_effects.jokers.x_mult_mod then'
position = 'before'
match_indent = true
payload = '''
if G.jokers.cards and G.jokers.cards[i] and G.jokers.cards[i].edition then
	local trg = G.jokers.cards[i]
	local edi = trg.edition
	if edi.fam_x_chips then
		hand_chips = mod_chips(hand_chips * edi.fam_x_chips)
		update_hand_text({delay = 0}, {chips = hand_chips})
		card_eval_status_text(trg, 'extra', nil, percent, nil,
		{message = 'X'.. edi.fam_x_chips ..' Chips',
		edition = true,
		fam_x_chips = true})
	end
	if edi.ranchips then
		edi.ranchips = math.random(edi.cmin,edi.cmax)
		hand_chips = mod_chips(hand_chips + edi.ranchips )
		update_hand_text({delay = 0}, {chips = hand_chips})
		card_eval_status_text(trg, 'extra', nil, percent, nil,
		{message = '+'.. edi.ranchips ..' Chips',
		edition = true,
		ranchips = true})
	end
	if edi.ranmult then
		edi.ranmult = math.random(edi.mmin,edi.mmax)
		mult = mod_mult(mult + edi.ranmult )
		update_hand_text({delay = 0}, {mult = mult})
		card_eval_status_text(trg, 'extra', nil, percent, nil,
		{message = '+'.. edi.ranmult ..' Mult',
		edition = true,
		ranmult = true})
	end
end
'''

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "if G.play.cards[i].ability.effect == 'Stone Card' then"
position = 'before'
match_indent = true
payload = '''
if G.play.cards[i].ability.suitless == true then
    local inside = false
    for j=1, #scoring_hand do
        if scoring_hand[j] == G.play.cards[i] then
            inside = true
        end
    end
    if not inside then table.insert(pures, G.play.cards[i]) end
end
'''

# Misprint-like description
# [[patches]]
# [patches.pattern]
# target = "card.lua"
# pattern = "if self.edition.type == 'negative' and self.ability.consumeable then"
# position = "before"
# payload = '''
# if self.config.center == G.P_CENTERS.e_fam_speckle then
# 	self.config.rantextnum = fam_numbers[math.random(1, 15)]
# 	self.config.rantextnum2 = fam_numbers[math.random(1, 15)]
#     main_start = {
#         {n=G.UIT.O, config={object = DynaText({string = fam_operators, pop_in_rate = 9999999, silent = true, random_element = true, pop_delay = 0.30, scale = 0.32, min_cycle_time = 0})}},
#         {n=G.UIT.O, config={object = DynaText({string = fam_numbers, colours = {G.C.MULT,},pop_in_rate = 9999999, silent = true, random_element = true, pop_delay = 0.33, scale = 0.32, min_cycle_time = 0})}},
#         {n=G.UIT.O, config={object = DynaText({string = fam_msgs_mult, colours = {G.C.UI.TEXT_DARK},pop_in_rate = 9999999, silent = true, random_element = true, pop_delay = 0.4011, scale = 0.32, min_cycle_time = 0})}},
#     }
# 	main_end = {
#         {n=G.UIT.O, config={object = DynaText({string = fam_operators, colours = {G.C.CHIPS,}, pop_in_rate = 9999999, silent = true, random_element = true, pop_delay = 0.30, scale = 0.32, min_cycle_time = 0})}},
#         {n=G.UIT.O, config={object = DynaText({string = fam_numbers, colours = {G.C.CHIPS,},pop_in_rate = 9999999, silent = true, random_element = true, pop_delay = 0.33, scale = 0.32, min_cycle_time = 0})}},
#         {n=G.UIT.O, config={object = DynaText({string = fam_msgs_chips, colours = {G.C.UI.TEXT_DARK},pop_in_rate = 9999999, silent = true, random_element = true, pop_delay = 0.4011, scale = 0.32, min_cycle_time = 0})}},
#     }
# end
# '''
# match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "elseif self.ability.name == 'Blueprint' then"
position = "before"
payload = '''
elseif self.ability.name == 'j_fam_crimsonotype' then
    self.ability.blueprint_compat_ui = self.ability.blueprint_compat_ui or ''; self.ability.blueprint_compat_check = nil
    main_end = (self.area and self.area == G.jokers) and {
        {n=G.UIT.C, config={align = "bm", minh = 0.4}, nodes={
            {n=G.UIT.C, config={ref_table = self, align = "m", colour = G.C.JOKER_GREY, r = 0.05, padding = 0.06, func = 'blueprint_compat'}, nodes={
                {n=G.UIT.T, config={ref_table = self.ability, ref_value = 'blueprint_compat_ui',colour = G.C.UI.TEXT_LIGHT, scale = 0.32*0.8}},
            }}
        }}
    } or nil
elseif self.ability.name == 'j_fam_thinktank' then
    self.ability.blueprint_compat_ui = self.ability.blueprint_compat_ui or ''; self.ability.blueprint_compat_check = nil
    main_end = (self.area and self.area == G.jokers) and {
        {n=G.UIT.C, config={align = "bm", minh = 0.4}, nodes={
            {n=G.UIT.C, config={ref_table = self, align = "m", colour = G.C.JOKER_GREY, r = 0.05, padding = 0.06, func = 'blueprint_compat'}, nodes={
                {n=G.UIT.T, config={ref_table = self.ability, ref_value = 'blueprint_compat_ui',colour = G.C.UI.TEXT_LIGHT, scale = 0.32*0.8}},
            }}
        }}
    } or nil
'''
match_indent = true 

[[patches]]
[patches.pattern]
target = "misc_functions.lua"
pattern = "if card.config.center.set == 'Tarot' or card.config.center.set == 'Planet' then"
position = "before"
payload = '''
if card.config.center.set == 'Tarot' or card.config.center.set == 'Planet' then 
	G.GAME.last_fortune_to_tarot = 'c_fam_the_martyr'
	if card.config.center_key == "c_strength" then
		G.GAME.last_fortune_to_tarot = 'c_fam_vigor'
	elseif card.config.center_key == "c_hanged_man" then
		G.GAME.last_fortune_to_tarot = 'c_fam_the_martyr'
	elseif card.config.center_key == "c_death" then
		G.GAME.last_fortune_to_tarot = 'c_fam_demise'
	elseif card.config.center_key == "c_judgement" then
		G.GAME.last_fortune_to_tarot = 'c_fam_verdict'
	elseif card.config.center_key == "c_high_priestess" then
		G.GAME.last_fortune_to_tarot = 'c_fam_the_harlot'
	elseif card.config.center_key == "c_wheel_of_fortune" then
		G.GAME.last_fortune_to_tarot = 'c_fam_the_cycle_of_fate'
	elseif card.config.center_key == "c_devil" then
		G.GAME.last_fortune_to_tarot = 'c_fam_humanity'
	elseif card.config.center_key == "c_world" then
		G.GAME.last_fortune_to_tarot = 'c_fam_the_landscape'
	elseif card.config.center_key == "c_moon" then
		G.GAME.last_fortune_to_tarot = 'c_fam_the_midnight'
	elseif card.config.center_key == "c_star" then
		G.GAME.last_fortune_to_tarot = 'c_fam_the_galaxy'
	elseif card.config.center_key == "c_sun" then
		G.GAME.last_fortune_to_tarot = 'c_fam_the_daylight'
	elseif card.config.center_key == "c_tower" then
		G.GAME.last_fortune_to_tarot = 'c_fam_the_pit'
	elseif card.config.center_key == "c_heirophant" then
		G.GAME.last_fortune_to_tarot = 'c_fam_the_bishop'
	elseif card.config.center_key == "c_empress" then
		G.GAME.last_fortune_to_tarot = 'c_fam_the_queen'
	elseif card.config.center_key == "c_lovers" then
		G.GAME.last_fortune_to_tarot = 'c_fam_the_wed'
	elseif card.config.center_key == "c_magician" then
		G.GAME.last_fortune_to_tarot = 'c_fam_the_illusionist'
	elseif card.config.center_key == "c_ceres" then
		G.GAME.last_fortune_to_tarot = 'c_fam_demeter'
	elseif card.config.center_key == "c_earth" then
		G.GAME.last_fortune_to_tarot = 'c_fam_terra'
	elseif card.config.center_key == "c_eris" then
		G.GAME.last_fortune_to_tarot = 'c_fam_discordia'
	elseif card.config.center_key == "c_jupiter" then
		G.GAME.last_fortune_to_tarot = 'c_fam_zeus'
	elseif card.config.center_key == "c_mars" then
		G.GAME.last_fortune_to_tarot = 'c_fam_ares'
	elseif card.config.center_key == "c_mercury" then
		G.GAME.last_fortune_to_tarot = 'c_fam_hermes'
	elseif card.config.center_key == "c_neptune" then
		G.GAME.last_fortune_to_tarot = 'c_fam_poseidon'
	elseif card.config.center_key == "c_planet_x" then
		G.GAME.last_fortune_to_tarot = 'c_fam_hecate'
	elseif card.config.center_key == "c_pluto" then
		G.GAME.last_fortune_to_tarot = 'c_fam_hades'
	elseif card.config.center_key == "c_saturn" then
		G.GAME.last_fortune_to_tarot = 'c_fam_cronus'
	elseif card.config.center_key == "c_uranus" then 
		G.GAME.last_fortune_to_tarot = 'c_fam_caelus'
	elseif card.config.center_key == "c_venus" then
		G.GAME.last_fortune_to_tarot = 'c_fam_aphrodite'
	end
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "elseif self.ability.set == 'Joker' then"
position = "before"
payload = '''
elseif self.ability.set == 'Familiar_Tarots' then
	if self.ability.name == "fam_the_broken" then
		local fool_c = G.GAME.last_fortune_to_tarot and G.P_CENTERS[G.GAME.last_fortune_to_tarot] or nil
		local last_fortune_to_tarot = fool_c and localize{type = 'name_text', key = fool_c.key, set = fool_c.set} or localize('k_none')
		local colour = (not fool_c or fool_c.name == 'The Broken') and G.C.RED or G.C.GREEN
		main_end = {
			{n=G.UIT.C, config={align = "bm", padding = 0.02}, nodes={
				{n=G.UIT.C, config={align = "m", colour = colour, r = 0.05, padding = 0.05}, nodes={
					{n=G.UIT.T, config={text = ' '..last_fortune_to_tarot..' ', colour = G.C.UI.TEXT_LIGHT, scale = 0.3, shadow = true}},
				}}
			}}
		}
		loc_vars = {last_fortune_to_tarot}
		if not (not fool_c or fool_c.name == 'The Broken') then
			info_queue[#info_queue+1] = fool_c
		end
	end
'''
match_indent = true

# [[patches]]
# [patches.pattern]
# target = "card.lua"
# pattern = "if self.ability.name == 'Hologram' then"
# position = "before"
# payload = '''
# if self.ability.set == 'tekana' then
#     self.hover_tilt = self.hover_tilt*1.5
#     self.children.floating_sprite:draw_shader('hologram', nil, self.ARGS.send_to_shader, nil, self.children.center, 2*scale_mod, 2*rotate_mod)
#     self.hover_tilt = self.hover_tilt/1.5
# end
# '''
# match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.seal == 'Blue' and #G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit then"
position = "before"
payload = '''
if self.config.center == G.P_CENTERS.m_fam_gilded then
    if self.ability.extra.p_dollars <= 0 then
        self:set_ability(G.P_CENTERS.m_steel, nil, true)
		card_eval_status_text(self, 'extra', nil, nil, nil, {message = 'Delamination!', colour = G.C.UI.TEXT_INACTIVE})
		G.E_MANAGER:add_event(Event({
            func = function()
                self:juice_up()
                return true
            end
        })) 
    else
        ease_dollars(self.ability.extra.p_dollars)
		card_eval_status_text(self, 'extra', nil, nil, nil, {message = localize('$')..self.ability.extra.p_dollars, colour = G.C.MONEY})
        self.ability.extra.p_dollars = self.ability.extra.p_dollars - 1
		self.ability.extra.left = self.ability.extra.left - 1
    end
	ret.effect = true
end
if self.seal == 'fam_sapphire_seal' and #G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit then
    create_consumable("Spectral", nil, nil, nil)
	ret.effect = true
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local edition = poll_edition('standard_edition'..G.GAME.round_resets.ante, edition_rate, true)"
position = "before"
payload = '''
if G.GAME.modifiers.fam_force_dual then
	notsuit = card.base.suit
	suit = pseudorandom_element({'Spades','Hearts','Diamonds','Clubs'}, pseudoseed('dual_deck'))
	if suit == notsuit then
		while suit == notsuit do
			suit = pseudorandom_element({'Spades','Hearts','Diamonds','Clubs'}, pseudoseed('dual_deck'))
		end
	end
	if suit == 'Spades' then
		card.ability.is_spade = true
	elseif suit == 'Hearts' then
		card.ability.is_heart = true
	elseif suit == 'Diamonds' then
		card.ability.is_diamond = true
	elseif suit == 'Clubs' then
		card.ability.is_club = true
	end
	set_sprite_suits(card, false)
end
'''
match_indent = true 

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Blueprint' or self.ability.name == 'Brainstorm' then"
position = "before"
payload = '''
if self.ability.name == 'j_fam_crimsonotype' or self.ability.name == 'j_fam_thinktank' then
	local other_joker = nil
    if self.ability.name == 'j_fam_thinktank' then
        other_joker = G.jokers.cards[#G.jokers.cards]
    elseif self.ability.name == 'j_fam_crimsonotype' then
        for i = 1, #G.jokers.cards do
            if G.jokers.cards[i] == self then other_joker = G.jokers.cards[i-1] end
        end
    end
    if other_joker and other_joker ~= self and other_joker.config.center.blueprint_compat then
        self.ability.blueprint_compat = 'compatible'
    else
        self.ability.blueprint_compat = 'incompatible'
    end
end
'''
match_indent = true

# Show edition on Edition Decks
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.children.back:draw(overlay)"
position = "after"
payload = '''
local currentBack = self.params.viewed_back and G.GAME.viewed_back or G.GAME.selected_back
if currentBack.effect.config.fam_force_edition then
    self.children.back:draw_shader(currentBack.effect.config.fam_force_edition , nil, self.ARGS.send_to_shader, true)
end
if currentBack.effect.config.fam_force_edition == 'negative' then
    self.children.back:draw_shader('negative', nil, self.ARGS.send_to_shader, true)
    self.children.center:draw_shader('negative_shine', nil, self.ARGS.send_to_shader, true)
end
'''
match_indent = true